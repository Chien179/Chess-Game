<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        TkSuQmCC
</value>
  </data>
</root>